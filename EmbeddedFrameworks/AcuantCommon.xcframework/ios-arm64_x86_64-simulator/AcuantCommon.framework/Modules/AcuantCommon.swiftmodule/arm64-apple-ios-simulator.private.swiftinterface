// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AcuantCommon
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public protocol IAcuantInitializer {
  func initialize(packages: [AcuantCommon.IAcuantPackage], callback: @escaping (AcuantCommon.AcuantError?) -> ()) -> Foundation.URLSessionTask?
}
public class AcuantInitializer : AcuantCommon.IAcuantInitializer {
  public init()
  public func initialize(packages: [AcuantCommon.IAcuantPackage], callback: @escaping (AcuantCommon.AcuantError?) -> ()) -> Foundation.URLSessionTask?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SecureAuthorizations {
  public var processingMode: AcuantCommon.ProcessingMode {
    get
  }
  public var hasOzone: Swift.Bool {
    get
  }
  public var chipExtract: Swift.Bool {
    get
  }
  public var hasLiveCapture: Swift.Bool {
    get
  }
  public var ipLiveness: Swift.Bool {
    get
  }
  @objc deinit
}
@objc public enum DeleteType : Swift.Int {
  case ID
  case MedicalCard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Image : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public var data: Foundation.NSMutableData?
  @objc public var dpi: Swift.Int
  @objc public var error: AcuantCommon.AcuantError?
  @objc public var isCorrectAspectRatio: Swift.Bool
  @objc public var aspectRatio: Swift.Float
  @objc public var points: [CoreFoundation.CGPoint]
  @objc public var isPassport: Swift.Bool
  @objc public class func newInstance() -> AcuantCommon.Image
  @objc public class func newInstance(image: UIKit.UIImage, data: Foundation.NSMutableData?) -> AcuantCommon.Image
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AcuantJwtParser {
  public func parseToken(jwtToken: Swift.String) -> AcuantCommon.AcuantJwtToken?
  public func decode(jwtToken jwt: Swift.String) -> [Swift.String : Any]
  public func base64UrlDecode(_ value: Swift.String) -> Foundation.Data?
  public func decodeJWTPart(_ value: Swift.String) -> [Swift.String : Any]?
  @objc deinit
}
public protocol IAcuantPackage {
  func initialize()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AcuantError : ObjectiveC.NSObject {
  @objc public var errorCode: Swift.Int
  @objc public var errorDescription: Swift.String?
  @objc override dynamic public init()
  @objc public init(errorCode: Swift.Int = 0, errorDescription: Swift.String?)
  @objc public class func newInstance() -> AcuantCommon.AcuantError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AcuantJwtToken {
  final public let value: Swift.String
  final public let expiration: Foundation.Date
  public init(value: Swift.String, expiration: Foundation.Date)
  public func isValid() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AcuantErrorCodes : ObjectiveC.NSObject {
  @objc public static let ERROR_InvalidCredentials: Swift.Int
  @objc public static let ERROR_InvalidEndpoint: Swift.Int
  @objc public static let ERROR_InitializationNotFinished: Swift.Int
  @objc public static let ERROR_Network: Swift.Int
  @objc public static let ERROR_InvalidJson: Swift.Int
  @objc public static let ERROR_CouldNotCrop: Swift.Int
  @objc public static let ERROR_CouldNotCreateConnectInstance: Swift.Int
  @objc public static let ERROR_CouldNotUploadConnectImage: Swift.Int
  @objc public static let ERROR_CouldNotUploadConnectBarcode: Swift.Int
  @objc public static let ERROR_CouldNotGetConnectData: Swift.Int
  @objc public static let ERROR_CouldNotClassifyDocument: Swift.Int
  @objc public static let ERROR_LowResolutionImage: Swift.Int
  @objc public static let ERROR_BlurryImage: Swift.Int
  @objc public static let ERROR_ImageWithGlare: Swift.Int
  @objc public static let ERROR_CouldNotGetIPLivenessToken: Swift.Int
  @objc public static let ERROR_NotALiveFace: Swift.Int
  @objc public static let ERROR_CouldNotAccessLivenessData: Swift.Int
  @objc public static let ERROR_CouldNotAccessCredential: Swift.Int
  @objc public static let ERROR_USER_CANCELED_ACTIVITY: Swift.Int
  @objc public static let ERROR_INVALID_PARAMETER: Swift.Int
  @objc public static let ERROR_OzoneInvalidFormat: Swift.Int
  @objc public static let ERROR_OzoneNotAuthorized: Swift.Int
  @objc public static let ERROR_EChipReadError: Swift.Int
  @objc public static let ERROR_InvalidNfcTag: Swift.Int
  @objc public static let ERROR_InvalidNfcKeyFormatting: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class Credential : ObjectiveC.NSObject {
  public class func authorization() -> AcuantCommon.SecureAuthorizations
  @objc public class func username() -> Swift.String?
  @objc public class func password() -> Swift.String?
  @objc public class func subscription() -> Swift.String?
  @objc public class func endpoints() -> AcuantCommon.Endpoints?
  @objc public class func removeToken() -> Swift.Bool
  @objc public class func setToken(token: Swift.String) -> Swift.Bool
  public class func getToken() -> AcuantCommon.AcuantJwtToken?
  @objc public class func isCredentialValid(endpoint: Swift.String?) -> Swift.Bool
  @objc public class func getAcuantAuthHeader() -> Swift.String?
  @objc public class func getBasicAuthHeader() -> Swift.String?
  @objc public class func setUsername(username: Swift.String!)
  @objc public class func setPassword(password: Swift.String!)
  @objc public class func setSubscription(subscription: Swift.String!)
  @objc public class func setEndpoints(endpoints: AcuantCommon.Endpoints)
  public class func setAuthorzation(auth: AcuantCommon.SecureAuthorizations)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AcuantErrorDescriptions : ObjectiveC.NSObject {
  @objc public static let ERROR_DESC_InvalidCredentials: Swift.String
  @objc public static let ERROR_DESC_InvalidLicenseKey: Swift.String
  @objc public static let ERROR_DESC_InvalidEndpoint: Swift.String
  @objc public static let ERROR_DESC_Network: Swift.String
  @objc public static let ERROR_DESC_InitializationNotFinished: Swift.String
  @objc public static let ERROR_DESC_InvalidJson: Swift.String
  @objc public static let ERROR_DESC_CouldNotCrop: Swift.String
  @objc public static let ERROR_DESC_BarcodeCaptureFailed: Swift.String
  @objc public static let ERROR_DESC_BarcodeCaptureTimedOut: Swift.String
  @objc public static let ERROR_DESC_BarcodeCaptureNotAuthorized: Swift.String
  @objc public static let ERROR_DESC_LiveFaceCaptureNotAuthorized: Swift.String
  @objc public static let ERROR_DESC_CouldNotCreateConnectInstance: Swift.String
  @objc public static let ERROR_DESC_CouldNotUploadConnectImage: Swift.String
  @objc public static let ERROR_DESC_CouldNotUploadConnectBarcode: Swift.String
  @objc public static let ERROR_DESC_CouldNotGetConnectData: Swift.String
  @objc public static let ERROR_DESC_CardWidthNotSet: Swift.String
  @objc public static let ERROR_DESC_CouldNotGetHealthCardData: Swift.String
  @objc public static let ERROR_DESC_CouldNotClassifyDocument: Swift.String
  @objc public static let ERROR_DESC_LowResolutionImage: Swift.String
  @objc public static let ERROR_DESC_BlurryImage: Swift.String
  @objc public static let ERROR_DESC_ImageWithGlare: Swift.String
  @objc public static let ERROR_DESC_CouldNotGetIPLivenessToken: Swift.String
  @objc public static let ERROR_DESC_NotALiveFace: Swift.String
  @objc public static let ERROR_DESC_CouldNotAccessLivenessData: Swift.String
  @objc public static let ERROR_DESC_ERROR_CouldNotAccessCredential: Swift.String
  @objc public static let ERROR_DESC_USER_CANCELED_ACTIVITY: Swift.String
  @objc public static let ERROR_DESC_INVALID_PARAMETERS: Swift.String
  @objc public static let ERROR_DESC_OzoneInvalidFormat: Swift.String
  @objc public static let ERROR_DESC_OzoneNotAuthorized: Swift.String
  @objc public static let ERROR_DESC_EChipReadError: Swift.String
  @objc public static let ERROR_DESC_InvalidNfcTag: Swift.String
  @objc public static let ERROR_DESC_InvalidNfcKeyFormatting: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class DocumentProcessingMode : ObjectiveC.NSObject {
  @objc public class func processingMode() -> AcuantCommon.ProcessingMode
  @objc public class func setDataCaptureProcessingMode()
  @objc deinit
}
@objc public enum ProcessingMode : Swift.Int {
  case Default
  case DataCapture
  case Authentication
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Endpoints : ObjectiveC.NSObject {
  @objc public var frmEndpoint: Swift.String?
  @objc public var idEndpoint: Swift.String?
  @objc public var passiveLivenessEndpoint: Swift.String?
  @objc public var ipLivenessEndpoint: Swift.String?
  @objc public var healthInsuranceEndpoint: Swift.String?
  @objc @AcuantCommon.HasValidDomain public var acasEndpoint: Swift.String? {
    @objc get
    @objc set
    _modify
  }
  @objc @AcuantCommon.HasValidDomain public var ozoneEndpoint: Swift.String? {
    @objc get
    @objc set
    _modify
  }
  @objc public class func newInstance() -> AcuantCommon.Endpoints
  @objc override dynamic public init()
  @objc deinit
}
@propertyWrapper public struct HasValidDomain {
  public init()
  public init(endpoint: Swift.String)
  public var wrappedValue: Swift.String? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Utils : ObjectiveC.NSObject {
  @objc public static var SENT_IMAGE_QUALITY_JPEG_COMPRESSION: CoreFoundation.CGFloat
  @objc public static var SDK_VERSION_CODE: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension AcuantCommon.DeleteType : Swift.Equatable {}
extension AcuantCommon.DeleteType : Swift.Hashable {}
extension AcuantCommon.DeleteType : Swift.RawRepresentable {}
extension AcuantCommon.ProcessingMode : Swift.Equatable {}
extension AcuantCommon.ProcessingMode : Swift.Hashable {}
extension AcuantCommon.ProcessingMode : Swift.RawRepresentable {}
