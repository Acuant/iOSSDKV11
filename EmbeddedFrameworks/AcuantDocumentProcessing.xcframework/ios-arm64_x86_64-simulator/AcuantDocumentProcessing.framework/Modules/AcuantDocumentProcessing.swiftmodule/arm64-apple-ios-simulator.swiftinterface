// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AcuantDocumentProcessing
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AcuantCommon
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @objcMembers public class IdData : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public var barcodeString: Swift.String?
  @objc override dynamic public init()
  @objc public class func createInstance() -> AcuantDocumentProcessing.IdData
  @objc deinit
}
@objc public enum ClassificationMode : Swift.Int, Swift.Codable {
  case automatic, manual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class Classification : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let unparsedMode: Swift.Int
  public var mode: AcuantDocumentProcessing.ClassificationMode? {
    get
  }
  @objc final public let orientationChanged: Swift.Bool
  @objc final public let presentationChanged: Swift.Bool
  @objc final public let classificationDetails: AcuantDocumentProcessing.ClassificationDetails?
  @objc final public let type: AcuantDocumentProcessing.DocumentType?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class HealthInsuranceCardResult : AcuantDocumentProcessing.ProcessingResult, Swift.Decodable {
  @objc final public let copayEr: Swift.String?
  @objc final public let copayOv: Swift.String?
  @objc final public let copaySp: Swift.String?
  @objc final public let copayUc: Swift.String?
  @objc final public let coverage: Swift.String?
  @objc final public let contractCode: Swift.String?
  @objc final public let dateOfBirth: Swift.String?
  @objc final public let deductible: Swift.String?
  @objc final public let effectiveDate: Swift.String?
  @objc final public let employer: Swift.String?
  @objc final public let expirationDate: Swift.String?
  @objc final public let firstName: Swift.String?
  @objc final public let groupName: Swift.String?
  @objc final public let groupNumber: Swift.String?
  @objc final public let issuerNumber: Swift.String?
  @objc final public let lastName: Swift.String?
  @objc final public let memberId: Swift.String?
  @objc final public let memberName: Swift.String?
  @objc final public let middleName: Swift.String?
  @objc final public let namePrefix: Swift.String?
  @objc final public let nameSuffix: Swift.String?
  @objc final public let other: Swift.String?
  @objc final public let payerId: Swift.String?
  @objc final public let planAdmin: Swift.String?
  @objc final public let planProvider: Swift.String?
  @objc final public let planType: Swift.String?
  @objc final public let rxBin: Swift.String?
  @objc final public let rxGroup: Swift.String?
  @objc final public let rxId: Swift.String?
  @objc final public let rxPcn: Swift.String?
  @objc final public let addresses: [AcuantDocumentProcessing.Address]?
  @objc final public let planCodes: [AcuantDocumentProcessing.PlanCode]?
  @objc final public let telephones: [AcuantDocumentProcessing.LabelValuePair]?
  @objc final public let emails: [AcuantDocumentProcessing.LabelValuePair]?
  @objc final public let webs: [AcuantDocumentProcessing.LabelValuePair]?
  @objc final public let transactionId: Swift.String?
  @objc public var instanceID: Swift.String?
  @objc final public let frontImage: UIKit.UIImage?
  @objc final public let backImage: UIKit.UIImage?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DeviceInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let hasContactlessChipReader: Swift.Bool
  @objc final public let hasMagneticStripeReader: Swift.Bool
  @objc final public let serialNumber: Swift.String?
  @objc final public let type: AcuantDocumentProcessing.DeviceType?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol CreateInstanceDelegate {
  @objc func instanceCreated(instanceId: Swift.String?, error: AcuantCommon.AcuantError?)
}
@objc public protocol DeleteDelegate {
  @objc func instanceDeleted(success: Swift.Bool)
}
@objc public protocol DocumentClassificationDelegate {
  @objc func documentClassified(success: Swift.Bool, classification: AcuantDocumentProcessing.Classification?, error: AcuantCommon.AcuantError?)
}
@objc @objcMembers public class DocumentAlert : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let actions: Swift.String?
  @objc final public let actionDescription: Swift.String?
  @objc final public let disposition: Swift.String?
  @objc final public let information: Swift.String?
  @objc final public let key: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let unparsedResult: Swift.Int
  public var result: AcuantDocumentProcessing.AuthenticationResult? {
    get
  }
  @objc final public let model: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum DocumentElement : Swift.Int, Swift.Decodable {
  case unknown, none, photo, data, substrate, overlay
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class DocumentRegion : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String?
  @objc final public let unparsedDocumentElement: Swift.Int
  public var documentElement: AcuantDocumentProcessing.DocumentElement? {
    get
  }
  @objc final public let imageReference: Swift.String
  @objc final public let key: Swift.String?
  @objc final public let rectangle: AcuantDocumentProcessing.Rectangle?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum DocumentProcessMode : Swift.Int, Swift.Codable {
  case `default`, captureData, authenticate, barcode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AuthenticationResult : Swift.Int, Swift.Decodable {
  case unknown, passed, failed, skipped, caution, attention
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDResult : AcuantDocumentProcessing.ProcessingResult, Swift.Decodable {
  @objc final public let instanceID: Swift.String
  @objc final public let unparsedAuthenticationSensitivity: Swift.Int
  public var authenticationSensitivity: AcuantDocumentProcessing.AuthenticationSensitivity? {
    get
  }
  @objc final public let engineVersion: Swift.String?
  @objc final public let libraryVersion: Swift.String?
  @objc final public let unparsedProcessMode: Swift.Int
  public var processMode: AcuantDocumentProcessing.DocumentProcessMode? {
    get
  }
  @objc public var unparsedResult: Swift.Int
  public var result: AcuantDocumentProcessing.AuthenticationResult? {
    get
  }
  @objc final public let subscription: AcuantDocumentProcessing.Subscription?
  @objc final public let biographic: AcuantDocumentProcessing.Biographic?
  @objc final public let classification: AcuantDocumentProcessing.Classification?
  @objc final public let device: AcuantDocumentProcessing.DeviceInfo?
  @objc final public let alerts: [AcuantDocumentProcessing.DocumentAlert]?
  @objc final public let dataFields: [AcuantDocumentProcessing.DocumentDataField]?
  @objc final public let fields: [AcuantDocumentProcessing.DocumentField]?
  @objc final public let images: [AcuantDocumentProcessing.DocumentImage]?
  @objc final public let regions: [AcuantDocumentProcessing.DocumentRegion]?
  @objc final public let unparsedTamperResult: Swift.Int
  public var tamperResult: AcuantDocumentProcessing.AuthenticationResult? {
    get
  }
  @objc final public let unparsedTamperSensitivity: Swift.Int
  public var tamperSensitivity: AcuantDocumentProcessing.TamperSensitivity? {
    get
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum GenderType : Swift.Int, Swift.Decodable {
  case unspecified, male, female, unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class Biographic : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let age: Swift.Int
  @objc final public let birthDate: Swift.String?
  @objc final public let expirationDate: Swift.String?
  @objc final public let fullName: Swift.String?
  @objc final public let unparsedGender: Swift.Int
  public var gender: AcuantDocumentProcessing.GenderType? {
    get
  }
  @objc public var photo: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class EvaluatedImageData {
  final public let imageBytes: Foundation.NSData
  final public let barcodeString: Swift.String?
  public init(imageBytes: Foundation.NSData, barcodeString: Swift.String?)
  @objc deinit
}
@objc @objcMembers public class PlanCode : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let planCode: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum AuthenticationSensitivity : Swift.Int, Swift.Codable {
  case normal, high, low
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TamperSensitivity : Swift.Int, Swift.Codable {
  case normal, high, low
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class IdOptions : ObjectiveC.NSObject {
  @objc public var cardSide: AcuantDocumentProcessing.DocumentSide
  @objc public var isHealthCard: Swift.Bool
  @objc public var isRetrying: Swift.Bool
  @objc public var authenticationSensitivity: AcuantDocumentProcessing.AuthenticationSensitivity
  @objc public var tamperSensitivity: AcuantDocumentProcessing.TamperSensitivity
  @objc public var countryCode: Swift.String?
  @objc override dynamic public init()
  @objc public class func createInstance() -> AcuantDocumentProcessing.IdOptions
  @objc deinit
}
@objc public enum DocumentClass : Swift.Int, Swift.Decodable {
  case unknown
  case passport
  case visa
  case driversLicense
  case identificationCard
  case permit
  case currency
  case residenceDocument
  case travelDocument
  case birthCertificate
  case vehicleRegistration
  case other
  case weaponLicense
  case tribalIdentification
  case voterIdentification
  case military
  case consularIdentification
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum DocumentDataType : Swift.Int, Swift.Decodable {
  case barcode2D, machineReadableZone, magneticStripe
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IssuerType : Swift.Int, Swift.Decodable {
  case unknown, country, stateProvince, tribal, municipality, business, other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum DocumentSize : Swift.Int, Swift.Decodable {
  case unknown, id1, id2, id3, letter, checkCurrency, custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class DocumentType : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let unparsedDocumentClass: Swift.Int
  public var documentClass: AcuantDocumentProcessing.DocumentClass? {
    get
  }
  @objc final public let classCode: Swift.String?
  @objc final public let className: Swift.String?
  @objc final public let countryCode: Swift.String?
  @objc final public let geographicRegions: [Swift.String]?
  @objc final public let isGeneric: Swift.Bool
  @objc final public let issue: Swift.String?
  @objc final public let issueType: Swift.String?
  @objc final public let issuerCode: Swift.String?
  @objc final public let issuerName: Swift.String?
  @objc final public let unparsedIssuerType: Swift.Int
  public var issuerType: AcuantDocumentProcessing.IssuerType? {
    get
  }
  @objc final public let keesingCode: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let unparsedSize: Swift.Int
  public var size: AcuantDocumentProcessing.DocumentSize? {
    get
  }
  final public let referenceDocumentDataTypes: [AcuantDocumentProcessing.DocumentDataType]?
  final public let documentDataTypes: [AcuantDocumentProcessing.DocumentDataType]?
  @objc final public let supportedImages: [AcuantDocumentProcessing.DocumentImageType]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum LightSource : Swift.Int, Swift.Decodable {
  case white, nearInfrared, ultravioletA, coaxialWhite, coaxialNearInfrared
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum DocumentSide : Swift.Int, Swift.Decodable {
  case front, back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class DocumentImageType : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let unparsedLight: Swift.Int
  public var light: AcuantDocumentProcessing.LightSource? {
    get
  }
  @objc final public let unparsedSide: Swift.Int
  public var side: AcuantDocumentProcessing.DocumentSide? {
    get
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class DocumentImage : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let horizontalResolution: Swift.Int
  @objc final public let verticalResolution: Swift.Int
  @objc final public let unparsedSide: Swift.Int
  public var side: AcuantDocumentProcessing.DocumentSide? {
    get
  }
  @objc final public let unparsedLight: Swift.Int
  public var light: AcuantDocumentProcessing.LightSource? {
    get
  }
  @objc final public let isCropped: Swift.Bool
  @objc final public let isTampered: Swift.Bool
  final public let glareMetric: Swift.UInt8?
  final public let sharpnessMetric: Swift.UInt8?
  @objc final public let mimeType: Swift.String?
  @objc final public let uri: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class Address : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let fullAddress: Swift.String?
  @objc final public let street: Swift.String?
  @objc final public let city: Swift.String?
  @objc final public let state: Swift.String?
  @objc final public let zip: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum DocumentDataSource : Swift.Int, Swift.Codable {
  case none, barcode1D, barcode2D, contactlessChip, machineReadableZone, magneticStripe, visualInspectionZone, other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class DocumentField : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let unparsedDataSource: Swift.Int
  public var dataSource: AcuantDocumentProcessing.DocumentDataSource? {
    get
  }
  @objc final public let fieldDescription: Swift.String?
  @objc final public let isImage: Swift.Bool
  @objc final public let key: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let regionReference: Swift.String?
  @objc final public let type: Swift.String?
  @objc final public let value: Swift.String?
  @objc final public let dataFieldReference: [Swift.String]?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class Rectangle : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let height: Swift.Int
  @objc final public let width: Swift.Int
  @objc final public let x: Swift.Int
  @objc final public let y: Swift.Int
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol GetDataDelegate {
  @objc func processingResultReceived(processingResult: AcuantDocumentProcessing.ProcessingResult)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DocumentProcessing : ObjectiveC.NSObject {
  @objc public class func createInstance(options: AcuantDocumentProcessing.IdOptions, delegate: any AcuantDocumentProcessing.CreateInstanceDelegate)
  @objc public class func uploadImage(instancdId: Swift.String, data: AcuantDocumentProcessing.IdData, options: AcuantDocumentProcessing.IdOptions, delegate: any AcuantDocumentProcessing.UploadImageDelegate)
  public class func uploadImage(instancdId: Swift.String, data: AcuantDocumentProcessing.EvaluatedImageData, options: AcuantDocumentProcessing.IdOptions, delegate: any AcuantDocumentProcessing.UploadImageDelegate)
  @objc public class func uploadBarcode(instanceId: Swift.String, barcodeString: Swift.String, delegate: any AcuantDocumentProcessing.UploadImageDelegate)
  @objc public class func getData(instanceId: Swift.String, isHealthCard: Swift.Bool, delegate: any AcuantDocumentProcessing.GetDataDelegate)
  @objc public class func deleteInstance(instanceId: Swift.String, type: AcuantCommon.DeleteType, delegate: any AcuantDocumentProcessing.DeleteDelegate)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class DocumentDataField : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String?
  @objc final public let dataSource: Swift.Int
  @objc final public let fieldDescrption: Swift.String?
  @objc final public let isImage: Swift.Bool
  @objc final public let key: Swift.String?
  @objc final public let regionOfInterest: AcuantDocumentProcessing.Rectangle?
  @objc final public let regionReference: Swift.String?
  @objc final public let reliability: Swift.Double
  @objc final public let type: Swift.String?
  @objc final public let value: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class Subscription : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let unparsedDocumentProcessMode: Swift.Int
  public var documentProcessMode: AcuantDocumentProcessing.DocumentProcessMode? {
    get
  }
  @objc final public let isActive: Swift.Bool
  @objc final public let isDevelopment: Swift.Bool
  @objc final public let isTrial: Swift.Bool
  @objc final public let name: Swift.String?
  @objc final public let storePII: Swift.Bool
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class LabelValuePair : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let label: Swift.String?
  @objc final public let value: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class ClassificationDetails : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let front: AcuantDocumentProcessing.DocumentType?
  @objc final public let back: AcuantDocumentProcessing.DocumentType?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum SensorType : Swift.Int, Swift.Codable {
  case unknown, camera, scanner, mobile
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DeviceType : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let manufacturer: Swift.String?
  @objc final public let model: Swift.String?
  @objc final public let unparsedSensorType: Swift.Int
  public var sensorType: AcuantDocumentProcessing.SensorType? {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ProcessingResult : ObjectiveC.NSObject {
  @objc public var error: AcuantCommon.AcuantError?
  @objc public class func createInstance() -> AcuantDocumentProcessing.ProcessingResult
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UploadImageDelegate {
  @objc func imageUploaded(error: AcuantCommon.AcuantError?, classification: AcuantDocumentProcessing.Classification?)
}
extension AcuantDocumentProcessing.ClassificationMode : Swift.Equatable {}
extension AcuantDocumentProcessing.ClassificationMode : Swift.Hashable {}
extension AcuantDocumentProcessing.ClassificationMode : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentElement : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentElement : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentElement : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentProcessMode : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentProcessMode : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentProcessMode : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.AuthenticationResult : Swift.Equatable {}
extension AcuantDocumentProcessing.AuthenticationResult : Swift.Hashable {}
extension AcuantDocumentProcessing.AuthenticationResult : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.GenderType : Swift.Equatable {}
extension AcuantDocumentProcessing.GenderType : Swift.Hashable {}
extension AcuantDocumentProcessing.GenderType : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.AuthenticationSensitivity : Swift.Equatable {}
extension AcuantDocumentProcessing.AuthenticationSensitivity : Swift.Hashable {}
extension AcuantDocumentProcessing.AuthenticationSensitivity : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.TamperSensitivity : Swift.Equatable {}
extension AcuantDocumentProcessing.TamperSensitivity : Swift.Hashable {}
extension AcuantDocumentProcessing.TamperSensitivity : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentClass : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentClass : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentClass : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentDataType : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentDataType : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentDataType : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.IssuerType : Swift.Equatable {}
extension AcuantDocumentProcessing.IssuerType : Swift.Hashable {}
extension AcuantDocumentProcessing.IssuerType : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentSize : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentSize : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentSize : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.LightSource : Swift.Equatable {}
extension AcuantDocumentProcessing.LightSource : Swift.Hashable {}
extension AcuantDocumentProcessing.LightSource : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentSide : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentSide : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentSide : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.DocumentDataSource : Swift.Equatable {}
extension AcuantDocumentProcessing.DocumentDataSource : Swift.Hashable {}
extension AcuantDocumentProcessing.DocumentDataSource : Swift.RawRepresentable {}
extension AcuantDocumentProcessing.SensorType : Swift.Equatable {}
extension AcuantDocumentProcessing.SensorType : Swift.Hashable {}
extension AcuantDocumentProcessing.SensorType : Swift.RawRepresentable {}
