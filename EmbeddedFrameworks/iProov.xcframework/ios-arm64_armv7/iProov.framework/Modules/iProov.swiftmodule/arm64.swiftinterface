// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iProov
import AVFoundation
import Accelerate
import AudioToolbox
import CoreImage
import CoreMedia
import CoreMotion
import CoreVideo
import Dispatch
import Foundation
import ImageIO
import OpenGLES
import QuartzCore
import SocketIO
import Starscream
import Swift
import UIKit
import VideoToolbox
import Vision
import WebKit
@_exported import iProov
import simd
extension CGRect : Swift.CustomDebugStringConvertible {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IProov) public class IProov : ObjectiveC.NSObject {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(IPErrorCode) public class IProovErrorCode : ObjectiveC.NSObject {
  @objc public static let networkError: Swift.Int
  @objc public static let encoderError: Swift.Int
  @objc public static let cameraError: Swift.Int
  @objc public static let serverError: Swift.Int
  @objc public static let captureAlreadyActive: Swift.Int
  @objc public static let lightingModelError: Swift.Int
  @objc public static let cameraPermissionDenied: Swift.Int
  @objc deinit
  @objc override dynamic public init()
}
public enum IProovError : Foundation.LocalizedError, Foundation.CustomNSError {
  case captureAlreadyActive
  case networkError(Swift.String?)
  case encoderError(code: Swift.Int32?)
  case lightingModelError
  case cameraError(Swift.String?)
  case cameraPermissionDenied
  case serverError(Swift.String?)
  public var errorCode: Swift.Int {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public protocol IProovPresentationDelegate : AnyObject {
  @objc func present(iProovViewController: UIKit.UIViewController, completion: (() -> Swift.Void)?)
  @objc func dismiss(iProovViewController: UIKit.UIViewController, completion: (() -> Swift.Void)?)
}
extension WKWebView {
  @objc dynamic public func installIProovNativeBridge(cryptographyEnabled: Swift.Bool = false)
  @objc dynamic public func uninstallNativeBridge()
}
extension IProov {
  @available(swift, obsoleted: 1.0)
  @objc public static func launch(streamingURL: Swift.String, token: Swift.String, options: iProov.Options, connecting: @escaping () -> Swift.Void, connected: @escaping () -> Swift.Void, processing: @escaping (Swift.Double, Swift.String) -> Swift.Void, success: @escaping (iProov.SuccessResult) -> Swift.Void, cancelled: @escaping () -> Swift.Void, failure: @escaping (iProov.FailureResult) -> Swift.Void, error: @escaping (Foundation.NSError) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc public class Options : ObjectiveC.NSObject {
  @objc public var ui: iProov.UIOptions
  @objc public var network: iProov.NetworkOptions
  @objc public var capture: iProov.CaptureOptions
  @objc public static func from(jsonString: Swift.String) -> iProov.Options
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class UIOptions : ObjectiveC.NSObject {
  @objc public var autoStartDisabled: Swift.Bool
  @objc public var filter: iProov.Filter
  @objc public var stringsBundle: Foundation.Bundle?
  @objc public var stringsTable: Swift.String?
  @objc public var lineColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var headerBackgroundColor: UIKit.UIColor
  @objc public var footerBackgroundColor: UIKit.UIColor
  @objc public var headerTextColor: UIKit.UIColor
  @objc public var footerTextColor: UIKit.UIColor
  @available(*, deprecated)
  @objc public var loadingTintColor: UIKit.UIColor
  @objc public var notReadyTintColor: UIKit.UIColor
  @objc public var readyTintColor: UIKit.UIColor
  @objc public var livenessTintColor: UIKit.UIColor
  @objc public var livenessScanningTintColor: UIKit.UIColor
  @objc public var closeButtonTintColor: UIKit.UIColor
  @objc public var progressBarColor: UIKit.UIColor
  @objc public var title: Swift.String?
  @objc public var font: Swift.String
  @objc public var closeButtonImage: UIKit.UIImage
  @objc public var logoImage: UIKit.UIImage?
  @objc public var scanLineDisabled: Swift.Bool
  @objc weak public var presentationDelegate: iProov.IProovPresentationDelegate?
  @available(*, deprecated)
  @objc public var useLegacyConnectingUI: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NetworkOptions : ObjectiveC.NSObject {
  @objc public var certificates: [Swift.String]
  @objc public var certificatePinningDisabled: Swift.Bool
  @objc public var timeout: Swift.Double
  @objc public var path: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CaptureOptions : ObjectiveC.NSObject {
  @objc public var maxYaw: CoreGraphics.CGFloat
  @objc public var maxRoll: CoreGraphics.CGFloat
  @objc public var maxPitch: CoreGraphics.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum Filter : Swift.Int {
  case classic, shaded, vibrant
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
infix operator ?= : AssignmentPrecedence
infix operator --> : AdditionPrecedence
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@objc(IPPublicKey) public class PublicKey : ObjectiveC.NSObject {
  @objc final public let key: Security.SecKey
  @objc public var pem: Swift.String {
    @objc get
  }
  @objc public var der: Foundation.Data {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@objc(IPKeyPair) public class KeyPair : ObjectiveC.NSObject {
  @objc public var publicKey: iProov.PublicKey {
    @objc get
  }
  @objc public var isInSecureEnclave: Swift.Bool {
    @objc get
  }
  @objc public func sign(data: Foundation.Data) -> Foundation.Data
  @objc deinit
  @objc override dynamic public init()
}
public typealias Callback = (iProov.Status) -> Swift.Void
@_hasMissingDesignatedInitializers @objc public class SuccessResult : ObjectiveC.NSObject {
  @objc final public let token: Swift.String
  @objc final public let frame: UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class FailureResult : ObjectiveC.NSObject {
  @objc final public let token: Swift.String
  @objc final public let reason: Swift.String
  @objc final public let feedbackCode: Swift.String
  @objc final public let frame: UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
public enum Status {
  case connecting
  case connected
  case processing(progress: Swift.Double, message: Swift.String)
  case success(iProov.SuccessResult)
  case cancelled
  case failure(iProov.FailureResult)
  case error(iProov.IProovError)
  public var isFinished: Swift.Bool {
    get
  }
}
extension IProov {
  public static func launch(streamingURL: Swift.String, token: Swift.String, options: iProov.Options = Options(), callback: @escaping iProov.Callback)
  @available(iOS 10.0, *)
  @objc public static var keyPair: iProov.KeyPair {
    @objc get
  }
}
extension UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
extension iProov.Filter : Swift.Equatable {}
extension iProov.Filter : Swift.Hashable {}
extension iProov.Filter : Swift.RawRepresentable {}
