// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iProov
import AVFoundation
import Accelerate
import AudioToolbox
import CoreImage
import CoreMedia
import CoreVideo
import Dispatch
import Foundation
import ImageIO
import KeychainAccess
import OpenGLES
import QuartzCore
import SocketIO
import Starscream
import Swift
import SwiftyJSON
import UIKit
import VideoToolbox
import Vision
import WebKit
@_exported import iProov
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IProov) public class IProov : ObjectiveC.NSObject {
  @objc deinit
}
public enum IProovError : Foundation.LocalizedError {
  case captureAlreadyActive
  case streamingError(Swift.String?)
  case encoderError(code: Swift.Int32?)
  case lightingModelError
  case cameraError(Swift.String?)
  case cameraPermissionDenied
  case serverError(Swift.String?)
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public protocol IProovPresentationDelegate : AnyObject {
  @objc func present(iProovViewController: UIKit.UIViewController)
  @objc func dismiss(iProovViewController: UIKit.UIViewController)
}
extension WKWebView {
  public func installIProovNativeBridge()
}
extension IProov {
  @available(swift, obsoleted: 1.0)
  @objc public static func launch(streamingURL: Swift.String, token: Swift.String, options: iProov.Options, processing: @escaping (Swift.Double, Swift.String) -> Swift.Void, success: @escaping (Swift.String) -> Swift.Void, cancelled: @escaping () -> Swift.Void, failure: @escaping (Swift.String, Swift.String) -> Swift.Void, error: @escaping (Foundation.NSError) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc public class Options : ObjectiveC.NSObject {
  @objc public var ui: iProov.UIOptions
  @objc public var network: iProov.NetworkOptions
  @objc public var capture: iProov.CaptureOptions
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class UIOptions : ObjectiveC.NSObject {
  @objc public var autoStartDisabled: Swift.Bool
  @objc public var filter: iProov.Filter
  @objc public var stringsBundle: Foundation.Bundle?
  @objc public var lineColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var loadingTintColor: UIKit.UIColor
  @objc public var notReadyTintColor: UIKit.UIColor
  @objc public var readyTintColor: UIKit.UIColor
  @objc public var title: Swift.String?
  @objc public var font: Swift.String
  @objc public var logoImage: UIKit.UIImage?
  @objc public var scanLineDisabled: Swift.Bool
  @objc weak public var presentationDelegate: iProov.IProovPresentationDelegate?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NetworkOptions : ObjectiveC.NSObject {
  @objc public var certificates: [Swift.String]
  @objc public var certificatePinningDisabled: Swift.Bool
  @objc public var timeout: Foundation.TimeInterval
  @objc public var path: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CaptureOptions : ObjectiveC.NSObject {
  @objc public var maxYaw: CoreGraphics.CGFloat
  @objc public var maxRoll: CoreGraphics.CGFloat
  @objc public var maxPitch: CoreGraphics.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum Filter : Swift.Int {
  case classic, shaded, vibrant
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
infix operator ?= : AssignmentPrecedence
infix operator --> : AdditionPrecedence
public typealias Callback = (iProov.Status) -> Swift.Void
public let defaultStreamingURL: Swift.String
public enum Status {
  case processing(progress: Swift.Double, message: Swift.String)
  case success(token: Swift.String)
  case cancelled
  case failure(reason: Swift.String, feedbackCode: Swift.String)
  case error(iProov.IProovError)
  public var isFinished: Swift.Bool {
    get
  }
}
extension IProov {
  public static func launch(streamingURL: Swift.String = defaultStreamingURL, token: Swift.String, options: iProov.Options = Options(), callback: @escaping iProov.Callback)
}
extension iProov.Filter : Swift.Equatable {}
extension iProov.Filter : Swift.Hashable {}
extension iProov.Filter : Swift.RawRepresentable {}
