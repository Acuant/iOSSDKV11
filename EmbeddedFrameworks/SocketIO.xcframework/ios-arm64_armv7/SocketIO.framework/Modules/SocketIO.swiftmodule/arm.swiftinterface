// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SocketIO
import Dispatch
import Foundation
@_exported import SocketIO
import Starscream
import Swift
import _Concurrency
@objc open class SocketEngine : ObjectiveC.NSObject, Starscream.WebSocketDelegate, Foundation.URLSessionDelegate, SocketIO.SocketEnginePollable, SocketIO.SocketEngineWebsocket, SocketIO.ConfigSettable {
  final public let engineQueue: Dispatch.DispatchQueue
  public var connectParams: [Swift.String : Any]? {
    get
    set
  }
  public var extraHeaders: [Swift.String : Swift.String]?
  public var postWait: [SocketIO.Post]
  public var waitingForPoll: Swift.Bool
  public var waitingForPost: Swift.Bool
  public var closed: Swift.Bool {
    get
  }
  public var compress: Swift.Bool {
    get
  }
  public var connected: Swift.Bool {
    get
  }
  public var cookies: [Foundation.HTTPCookie]? {
    get
  }
  public var fastUpgrade: Swift.Bool {
    get
  }
  public var forcePolling: Swift.Bool {
    get
  }
  public var forceWebsockets: Swift.Bool {
    get
  }
  public var invalidated: Swift.Bool {
    get
  }
  public var polling: Swift.Bool {
    get
  }
  public var probing: Swift.Bool {
    get
  }
  public var session: Foundation.URLSession? {
    get
  }
  public var sid: Swift.String {
    get
  }
  public var socketPath: Swift.String {
    get
  }
  public var urlPolling: Foundation.URL {
    get
  }
  public var urlWebSocket: Foundation.URL {
    get
  }
  public var version: SocketIO.SocketIOVersion {
    get
  }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  public var websocket: Swift.Bool {
    get
  }
  public var enableSOCKSProxy: Swift.Bool {
    get
  }
  public var ws: Starscream.WebSocket? {
    get
  }
  public var wsConnected: Swift.Bool {
    get
  }
  weak public var client: SocketIO.SocketEngineClient?
  public init(client: SocketIO.SocketEngineClient, url: Foundation.URL, config: SocketIO.SocketIOClientConfiguration)
  required convenience public init(client: SocketIO.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  @objc deinit
  open func connect()
  open func didError(reason: Swift.String)
  open func disconnect(reason: Swift.String)
  open func doFastUpgrade()
  open func flushWaitingForPostToWebSocket()
  open func parseEngineData(_ data: Foundation.Data)
  open func parseEngineMessage(_ message: Swift.String)
  open func setConfigs(_ config: SocketIO.SocketIOClientConfiguration)
  open func write(_ msg: Swift.String, withType type: SocketIO.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())? = nil)
}
extension SocketIO.SocketEngine {
  public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
}
extension SocketIO.SocketEngine {
  public func didReceive(event: Starscream.WebSocketEvent, client _: Starscream.WebSocket)
}
public protocol SocketEngineSpec : AnyObject {
  var client: SocketIO.SocketEngineClient? { get set }
  var closed: Swift.Bool { get }
  var compress: Swift.Bool { get }
  var connected: Swift.Bool { get }
  var connectParams: [Swift.String : Any]? { get set }
  var cookies: [Foundation.HTTPCookie]? { get }
  var engineQueue: Dispatch.DispatchQueue { get }
  var extraHeaders: [Swift.String : Swift.String]? { get set }
  var fastUpgrade: Swift.Bool { get }
  var forcePolling: Swift.Bool { get }
  var forceWebsockets: Swift.Bool { get }
  var polling: Swift.Bool { get }
  var probing: Swift.Bool { get }
  var sid: Swift.String { get }
  var socketPath: Swift.String { get }
  var urlPolling: Foundation.URL { get }
  var urlWebSocket: Foundation.URL { get }
  var version: SocketIO.SocketIOVersion { get }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  var websocket: Swift.Bool { get }
  var ws: Starscream.WebSocket? { get }
  init(client: SocketIO.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  func connect()
  func didError(reason: Swift.String)
  func disconnect(reason: Swift.String)
  func doFastUpgrade()
  func flushWaitingForPostToWebSocket()
  func parseEngineData(_ data: Foundation.Data)
  func parseEngineMessage(_ message: Swift.String)
  func write(_ msg: Swift.String, withType type: SocketIO.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
}
@objc public protocol SocketEngineClient {
  @objc func engineDidError(reason: Swift.String)
  @objc func engineDidClose(reason: Swift.String)
  @objc func engineDidOpen(reason: Swift.String)
  @objc func engineDidReceivePing()
  @objc func engineDidReceivePong()
  @objc func engineDidSendPing()
  @objc func engineDidSendPong()
  @objc func parseEngineMessage(_ msg: Swift.String)
  @objc func parseEngineBinaryData(_ data: Foundation.Data)
  @objc func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
}
public protocol SocketEnginePollable : SocketIO.SocketEngineSpec {
  var invalidated: Swift.Bool { get }
  var postWait: [SocketIO.Post] { get set }
  var session: Foundation.URLSession? { get }
  var waitingForPoll: Swift.Bool { get set }
  var waitingForPost: Swift.Bool { get set }
  func doPoll()
  func sendPollMessage(_ message: Swift.String, withType type: SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  func stopPolling()
}
extension SocketIO.SocketEnginePollable {
  public func doPoll()
  public func sendPollMessage(_ message: Swift.String, withType type: SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())? = nil)
  public func stopPolling()
}
public protocol SocketEngineWebsocket : SocketIO.SocketEngineSpec {
  var wsConnected: Swift.Bool { get }
  func sendWebSocketMessage(_ str: Swift.String, withType type: SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
}
extension SocketIO.SocketEngineWebsocket {
  public func sendWebSocketMessage(_ str: Swift.String, withType type: SocketIO.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
}
@objc public enum SocketEnginePacketType : Swift.Int {
  case open
  case close
  case ping
  case pong
  case message
  case upgrade
  case noop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class SocketAckEmitter : ObjectiveC.NSObject {
  @objc final public var rawEmitView: SocketIO.SocketRawAckView {
    @objc get
  }
  final public var expected: Swift.Bool {
    get
  }
  public init(socket: SocketIO.SocketIOClient, ackNum: Swift.Int)
  final public func with(_ items: SocketIO.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class OnAckCallback : ObjectiveC.NSObject {
  @objc deinit
  @objc final public func timingOut(after seconds: Swift.Double, callback: @escaping SocketIO.AckCallback)
}
public enum SocketAckStatus : Swift.String {
  case noAck
  public static func == (lhs: Swift.String, rhs: SocketIO.SocketAckStatus) -> Swift.Bool
  public static func == (lhs: SocketIO.SocketAckStatus, rhs: Swift.String) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class SocketAnyEvent : ObjectiveC.NSObject {
  @objc final public let event: Swift.String
  @objc final public let items: [Any]?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc open class SocketIOClient : ObjectiveC.NSObject, SocketIO.SocketIOClientSpec {
  final public let nsp: Swift.String
  public var anyHandler: ((SocketIO.SocketAnyEvent) -> ())? {
    get
  }
  public var handlers: [SocketIO.SocketEventHandler] {
    get
  }
  weak public var manager: SocketIO.SocketManagerSpec? {
    get
  }
  public var rawEmitView: SocketIO.SocketRawView {
    get
  }
  public var status: SocketIO.SocketIOStatus {
    get
  }
  public var sid: Swift.String? {
    get
  }
  public init(manager: SocketIO.SocketManagerSpec, nsp: Swift.String)
  @objc deinit
  open func connect(withPayload payload: [Swift.String : Any]? = nil)
  open func connect(withPayload payload: [Swift.String : Any]? = nil, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  open func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func emit(_ event: Swift.String, _ items: SocketIO.SocketData..., completion: (() -> ())? = nil)
  open func emit(_ event: Swift.String, with items: [SocketIO.SocketData], completion: (() -> ())?)
  open func emitWithAck(_ event: Swift.String, _ items: SocketIO.SocketData...) -> SocketIO.OnAckCallback
  open func emitWithAck(_ event: Swift.String, with items: [SocketIO.SocketData]) -> SocketIO.OnAckCallback
  open func emitAck(_ ack: Swift.Int, with items: [Any])
  open func handleAck(_ ack: Swift.Int, data: [Any])
  open func handleClientEvent(_ event: SocketIO.SocketClientEvent, data: [Any])
  open func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int = -1)
  open func handlePacket(_ packet: SocketIO.SocketPacket)
  open func leaveNamespace()
  open func joinNamespace(withPayload payload: [Swift.String : Any]? = nil)
  open func off(clientEvent event: SocketIO.SocketClientEvent)
  open func off(_ event: Swift.String)
  open func off(id: Foundation.UUID)
  @discardableResult
  open func on(_ event: Swift.String, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func on(clientEvent event: SocketIO.SocketClientEvent, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(clientEvent event: SocketIO.SocketClientEvent, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(_ event: Swift.String, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  open func onAny(_ handler: @escaping (SocketIO.SocketAnyEvent) -> ())
  @available(*, unavailable, message: "Call the manager's reconnect method")
  open func reconnect()
  open func removeAllHandlers()
  open func setReconnecting(reason: Swift.String)
}
public struct SocketEventHandler {
  public let event: Swift.String
  public let id: Foundation.UUID
  public let callback: SocketIO.NormalCallback
  public func executeCallback(with items: [Any], withAck ack: Swift.Int, withSocket socket: SocketIO.SocketIOClient)
}
public protocol SocketIOClientSpec : AnyObject {
  var anyHandler: ((SocketIO.SocketAnyEvent) -> ())? { get }
  var handlers: [SocketIO.SocketEventHandler] { get }
  var manager: SocketIO.SocketManagerSpec? { get }
  var nsp: Swift.String { get }
  var rawEmitView: SocketIO.SocketRawView { get }
  var sid: Swift.String? { get }
  var status: SocketIO.SocketIOStatus { get }
  func connect(withPayload payload: [Swift.String : Any]?)
  func connect(withPayload payload: [Swift.String : Any]?, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  func didDisconnect(reason: Swift.String)
  func didError(reason: Swift.String)
  func disconnect()
  func emit(_ event: Swift.String, _ items: SocketIO.SocketData..., completion: (() -> ())?)
  func emit(_ event: Swift.String, with items: [SocketIO.SocketData], completion: (() -> ())?)
  func emitAck(_ ack: Swift.Int, with items: [Any])
  func emitWithAck(_ event: Swift.String, _ items: SocketIO.SocketData...) -> SocketIO.OnAckCallback
  func emitWithAck(_ event: Swift.String, with items: [SocketIO.SocketData]) -> SocketIO.OnAckCallback
  func handleAck(_ ack: Swift.Int, data: [Any])
  func handleClientEvent(_ event: SocketIO.SocketClientEvent, data: [Any])
  func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int)
  func handlePacket(_ packet: SocketIO.SocketPacket)
  func leaveNamespace()
  func joinNamespace(withPayload payload: [Swift.String : Any]?)
  func off(clientEvent event: SocketIO.SocketClientEvent)
  func off(_ event: Swift.String)
  func off(id: Foundation.UUID)
  func on(_ event: Swift.String, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  func on(clientEvent event: SocketIO.SocketClientEvent, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  func once(clientEvent event: SocketIO.SocketClientEvent, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  func once(_ event: Swift.String, callback: @escaping SocketIO.NormalCallback) -> Foundation.UUID
  func onAny(_ handler: @escaping (SocketIO.SocketAnyEvent) -> ())
  func removeAllHandlers()
  func setReconnecting(reason: Swift.String)
}
extension SocketIO.SocketIOClientSpec {
  public func didError(reason: Swift.String)
}
public enum SocketClientEvent : Swift.String {
  case connect
  case disconnect
  case error
  case ping
  case pong
  case reconnect
  case reconnectAttempt
  case statusChange
  case websocketUpgrade
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SocketIOVersion : Swift.Int {
  case two
  case three
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SocketIOClientOption {
  case compress
  case connectParams([Swift.String : Any])
  case cookies([Foundation.HTTPCookie])
  case extraHeaders([Swift.String : Swift.String])
  case forceNew(Swift.Bool)
  case forcePolling(Swift.Bool)
  case forceWebsockets(Swift.Bool)
  case enableSOCKSProxy(Swift.Bool)
  case handleQueue(Dispatch.DispatchQueue)
  case log(Swift.Bool)
  case logger(SocketIO.SocketLogger)
  case path(Swift.String)
  case reconnects(Swift.Bool)
  case reconnectAttempts(Swift.Int)
  case reconnectWait(Swift.Int)
  case reconnectWaitMax(Swift.Int)
  case randomizationFactor(Swift.Double)
  case secure(Swift.Bool)
  case security(Starscream.CertificatePinning)
  case selfSigned(Swift.Bool)
  case sessionDelegate(Foundation.URLSessionDelegate)
  case version(SocketIO.SocketIOVersion)
  public var description: Swift.String {
    get
  }
  public static func == (lhs: SocketIO.SocketIOClientOption, rhs: SocketIO.SocketIOClientOption) -> Swift.Bool
}
@objc public enum SocketIOStatus : Swift.Int, Swift.CustomStringConvertible {
  case notConnected
  case disconnected
  case connecting
  case connected
  public var active: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct SocketIOClientConfiguration : Swift.ExpressibleByArrayLiteral, Swift.Collection, Swift.MutableCollection {
  public typealias Element = SocketIO.SocketIOClientOption
  public typealias Index = Swift.Array<SocketIO.SocketIOClientOption>.Index
  public typealias Iterator = Swift.Array<SocketIO.SocketIOClientOption>.Iterator
  public typealias SubSequence = Swift.Array<SocketIO.SocketIOClientOption>.SubSequence
  public var startIndex: SocketIO.SocketIOClientConfiguration.Index {
    get
  }
  public var endIndex: SocketIO.SocketIOClientConfiguration.Index {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: SocketIO.SocketIOClientConfiguration.Index.Stride {
    get
  }
  public var first: SocketIO.SocketIOClientConfiguration.Element? {
    get
  }
  public subscript(position: SocketIO.SocketIOClientConfiguration.Index) -> SocketIO.SocketIOClientConfiguration.Element {
    get
    set
  }
  public subscript(bounds: Swift.Range<SocketIO.SocketIOClientConfiguration.Index>) -> SocketIO.SocketIOClientConfiguration.SubSequence {
    get
    set
  }
  public init(arrayLiteral elements: SocketIO.SocketIOClientConfiguration.Element...)
  public func makeIterator() -> SocketIO.SocketIOClientConfiguration.Iterator
  public func index(after i: SocketIO.SocketIOClientConfiguration.Index) -> SocketIO.SocketIOClientConfiguration.Index
  public mutating func insert(_ element: SocketIO.SocketIOClientConfiguration.Element, replacing replace: Swift.Bool = true)
  public typealias ArrayLiteralElement = SocketIO.SocketIOClientConfiguration.Element
  public typealias Indices = Swift.DefaultIndices<SocketIO.SocketIOClientConfiguration>
}
public protocol ConfigSettable {
  mutating func setConfigs(_ config: SocketIO.SocketIOClientConfiguration)
}
public protocol SocketData {
  func socketRepresentation() throws -> SocketIO.SocketData
}
extension SocketIO.SocketData {
  public func socketRepresentation() -> SocketIO.SocketData
}
extension Swift.Array : SocketIO.SocketData {
}
extension Swift.Bool : SocketIO.SocketData {
}
extension Swift.Dictionary : SocketIO.SocketData {
}
extension Swift.Double : SocketIO.SocketData {
}
extension Swift.Int : SocketIO.SocketData {
}
extension Foundation.NSArray : SocketIO.SocketData {
}
extension Foundation.Data : SocketIO.SocketData {
}
extension Foundation.NSData : SocketIO.SocketData {
}
extension Foundation.NSDictionary : SocketIO.SocketData {
}
extension Foundation.NSString : SocketIO.SocketData {
}
extension Foundation.NSNull : SocketIO.SocketData {
}
extension Swift.String : SocketIO.SocketData {
}
public typealias AckCallback = ([Any]) -> ()
public typealias NormalCallback = ([Any], SocketIO.SocketAckEmitter) -> ()
public typealias Post = (msg: Swift.String, completion: (() -> ())?)
public protocol SocketLogger : AnyObject {
  var log: Swift.Bool { get set }
  func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
extension SocketIO.SocketLogger {
  public func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  public func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
public struct SocketPacket : Swift.CustomStringConvertible {
  public let nsp: Swift.String
  public let id: Swift.Int
  public let type: SocketIO.SocketPacket.PacketType
  public var binary: [Foundation.Data] {
    get
  }
  public var data: [Any] {
    get
  }
  public var args: [Any] {
    get
  }
  public var description: Swift.String {
    get
  }
  public var event: Swift.String {
    get
  }
  public var packetString: Swift.String {
    get
  }
}
extension SocketIO.SocketPacket {
  public enum PacketType : Swift.Int {
    case connect
    case disconnect
    case event
    case ack
    case error
    case binaryEvent
    case binaryAck
    public var isBinary: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol SocketParsable : AnyObject {
  func parseBinaryData(_ data: Foundation.Data) -> SocketIO.SocketPacket?
  func parseSocketMessage(_ message: Swift.String) -> SocketIO.SocketPacket?
}
public enum SocketParsableError : Swift.Error {
  case invalidDataArray
  case invalidPacket
  case invalidPacketType
  public static func == (a: SocketIO.SocketParsableError, b: SocketIO.SocketParsableError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SocketDataBufferable : AnyObject {
  var waitingPackets: [SocketIO.SocketPacket] { get set }
}
extension SocketIO.SocketParsable where Self : SocketIO.SocketDataBufferable, Self : SocketIO.SocketManagerSpec {
  public func parseSocketMessage(_ message: Swift.String) -> SocketIO.SocketPacket?
  public func parseBinaryData(_ data: Foundation.Data) -> SocketIO.SocketPacket?
}
@objc open class SocketManager : ObjectiveC.NSObject, SocketIO.SocketManagerSpec, SocketIO.SocketParsable, SocketIO.SocketDataBufferable, SocketIO.ConfigSettable {
  public var defaultSocket: SocketIO.SocketIOClient {
    get
  }
  final public let socketURL: Foundation.URL
  public var config: SocketIO.SocketIOClientConfiguration {
    get
    set
  }
  public var engine: SocketIO.SocketEngineSpec?
  public var forceNew: Swift.Bool
  public var handleQueue: Dispatch.DispatchQueue
  public var nsps: [Swift.String : SocketIO.SocketIOClient]
  public var reconnects: Swift.Bool
  public var reconnectWait: Swift.Int
  public var reconnectWaitMax: Swift.Int
  public var randomizationFactor: Swift.Double
  public var status: SocketIO.SocketIOStatus {
    get
  }
  public var version: SocketIO.SocketIOVersion {
    get
  }
  public var waitingPackets: [SocketIO.SocketPacket]
  public init(socketURL: Foundation.URL, config: SocketIO.SocketIOClientConfiguration = [])
  @objc convenience public init(socketURL: Foundation.URL, config: [Swift.String : Any]?)
  @objc deinit
  open func connect()
  open func connectSocket(_ socket: SocketIO.SocketIOClient, withPayload payload: [Swift.String : Any]? = nil)
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func disconnectSocket(_ socket: SocketIO.SocketIOClient)
  open func disconnectSocket(forNamespace nsp: Swift.String)
  open func emitAll(clientEvent event: SocketIO.SocketClientEvent, data: [Any])
  open func emitAll(_ event: Swift.String, _ items: SocketIO.SocketData...)
  @objc open func engineDidClose(reason: Swift.String)
  @objc open func engineDidError(reason: Swift.String)
  @objc open func engineDidOpen(reason: Swift.String)
  @objc open func engineDidReceivePing()
  @objc open func engineDidSendPing()
  @objc open func engineDidReceivePong()
  @objc open func engineDidSendPong()
  @objc open func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
  @objc open func parseEngineMessage(_ msg: Swift.String)
  @objc open func parseEngineBinaryData(_ data: Foundation.Data)
  open func reconnect()
  @discardableResult
  open func removeSocket(_ socket: SocketIO.SocketIOClient) -> SocketIO.SocketIOClient?
  open func setConfigs(_ config: SocketIO.SocketIOClientConfiguration)
  open func socket(forNamespace nsp: Swift.String) -> SocketIO.SocketIOClient
}
public protocol SocketManagerSpec : SocketIO.SocketEngineClient {
  var defaultSocket: SocketIO.SocketIOClient { get }
  var engine: SocketIO.SocketEngineSpec? { get set }
  var forceNew: Swift.Bool { get set }
  var handleQueue: Dispatch.DispatchQueue { get set }
  var nsps: [Swift.String : SocketIO.SocketIOClient] { get set }
  var reconnects: Swift.Bool { get set }
  var reconnectWait: Swift.Int { get set }
  var reconnectWaitMax: Swift.Int { get set }
  var randomizationFactor: Swift.Double { get set }
  var socketURL: Foundation.URL { get }
  var status: SocketIO.SocketIOStatus { get }
  var version: SocketIO.SocketIOVersion { get }
  func connect()
  func connectSocket(_ socket: SocketIO.SocketIOClient, withPayload: [Swift.String : Any]?)
  func didDisconnect(reason: Swift.String)
  func disconnect()
  func disconnectSocket(_ socket: SocketIO.SocketIOClient)
  func disconnectSocket(forNamespace nsp: Swift.String)
  func emitAll(_ event: Swift.String, _ items: SocketIO.SocketData...)
  func reconnect()
  @discardableResult
  func removeSocket(_ socket: SocketIO.SocketIOClient) -> SocketIO.SocketIOClient?
  func socket(forNamespace nsp: Swift.String) -> SocketIO.SocketIOClient
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawView : ObjectiveC.NSObject {
  final public func emit(_ event: Swift.String, _ items: SocketIO.SocketData...)
  @objc final public func emit(_ event: Swift.String, with items: [Any])
  final public func emitWithAck(_ event: Swift.String, _ items: SocketIO.SocketData...) -> SocketIO.OnAckCallback
  @objc final public func emitWithAck(_ event: Swift.String, with items: [Any]) -> SocketIO.OnAckCallback
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawAckView : ObjectiveC.NSObject {
  final public func with(_ items: SocketIO.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc deinit
}
extension SocketIO.SocketEnginePacketType : Swift.Equatable {}
extension SocketIO.SocketEnginePacketType : Swift.Hashable {}
extension SocketIO.SocketEnginePacketType : Swift.RawRepresentable {}
extension SocketIO.SocketAckStatus : Swift.Equatable {}
extension SocketIO.SocketAckStatus : Swift.Hashable {}
extension SocketIO.SocketAckStatus : Swift.RawRepresentable {}
extension SocketIO.SocketClientEvent : Swift.Equatable {}
extension SocketIO.SocketClientEvent : Swift.Hashable {}
extension SocketIO.SocketClientEvent : Swift.RawRepresentable {}
extension SocketIO.SocketIOVersion : Swift.Equatable {}
extension SocketIO.SocketIOVersion : Swift.Hashable {}
extension SocketIO.SocketIOVersion : Swift.RawRepresentable {}
extension SocketIO.SocketIOClientOption : Swift.Equatable {}
extension SocketIO.SocketIOClientOption : Swift.CustomStringConvertible {}
extension SocketIO.SocketIOStatus : Swift.Equatable {}
extension SocketIO.SocketIOStatus : Swift.Hashable {}
extension SocketIO.SocketIOStatus : Swift.RawRepresentable {}
extension SocketIO.SocketPacket.PacketType : Swift.Equatable {}
extension SocketIO.SocketPacket.PacketType : Swift.Hashable {}
extension SocketIO.SocketPacket.PacketType : Swift.RawRepresentable {}
extension SocketIO.SocketParsableError : Swift.Equatable {}
extension SocketIO.SocketParsableError : Swift.Hashable {}
